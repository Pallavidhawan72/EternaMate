import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import axios from 'axios';
import { Button } from './components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Input } from './components/ui/input';
import { Textarea } from './components/ui/textarea';
import { Label } from './components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './components/ui/select';
import { Slider } from './components/ui/slider';
import { Badge } from './components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from './components/ui/avatar';
import { ScrollArea } from './components/ui/scroll-area';
import { Separator } from './components/ui/separator';
import { Heart, MessageCircle, Settings, Plus, Send, Mic, MicOff, Volume2, VolumeX, Globe } from 'lucide-react';
import './App.css';

// Language configurations
const LANGUAGES = [
  { code: 'en', name: 'English', flag: 'üá∫üá∏', speechLang: 'en-US' },
  { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏', speechLang: 'es-ES' },
  { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑', speechLang: 'fr-FR' },
  { code: 'de', name: 'Deutsch', flag: 'üá©üá™', speechLang: 'de-DE' },
  { code: 'it', name: 'Italiano', flag: 'üáÆüáπ', speechLang: 'it-IT' },
  { code: 'pt', name: 'Portugu√™s', flag: 'üáßüá∑', speechLang: 'pt-BR' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', speechLang: 'ru-RU' },
  { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', speechLang: 'ja-JP' },
  { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑', speechLang: 'ko-KR' },
  { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥', speechLang: 'zh-CN' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶', speechLang: 'ar-SA' },
  { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥', speechLang: 'hi-IN' },
  { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠', speechLang: 'th-TH' },
  { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥', speechLang: 'vi-VN' },
  { code: 'nl', name: 'Nederlands', flag: 'üá≥üá±', speechLang: 'nl-NL' },
  { code: 'sv', name: 'Svenska', flag: 'üá∏üá™', speechLang: 'sv-SE' },
  { code: 'no', name: 'Norsk', flag: 'üá≥üá¥', speechLang: 'no-NO' },
  { code: 'da', name: 'Dansk', flag: 'üá©üá∞', speechLang: 'da-DK' },
  { code: 'pl', name: 'Polski', flag: 'üáµüá±', speechLang: 'pl-PL' },
  { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑', speechLang: 'tr-TR' }
];

// Translation service for user input
const translateText = async (text, targetLang) => {
  // Simple translation mappings for common phrases
  const translations = {
    'hi': {
      'hello': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
      'hi': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
      'how are you': '‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç',
      'i love you': '‡§Æ‡•à‡§Ç ‡§§‡•Å‡§Æ‡§∏‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç',
      'good morning': '‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§',
      'good night': '‡§∂‡•Å‡§≠ ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
      'thank you': '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶',
      'yes': '‡§π‡§æ‡§Ç',
      'no': '‡§®‡§π‡•Ä‡§Ç',
      'where are you': '‡§Ü‡§™ ‡§ï‡§π‡§æ‡§Å ‡§π‡•à‡§Ç',
      'speak in hindi': '‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç',
      'i miss you': '‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§¶ ‡§Ü‡§§‡•Ä ‡§π‡•à',
      'i am fine': '‡§Æ‡•à‡§Ç ‡§†‡•Ä‡§ï ‡§π‡•Ç‡§Ç',
      'what are you doing': '‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç'
    },
    'es': {
      'hello': 'hola',
      'hi': 'hola',
      'how are you': 'como estas',
      'i love you': 'te amo',
      'good morning': 'buenos d√≠as',
      'good night': 'buenas noches',
      'thank you': 'gracias',
      'yes': 's√≠',
      'no': 'no'
    },
    'fr': {
      'hello': 'bonjour',
      'hi': 'salut',
      'how are you': 'comment allez-vous',
      'i love you': 'je t\'aime',
      'good morning': 'bonjour',
      'good night': 'bonne nuit',
      'thank you': 'merci',
      'yes': 'oui',
      'no': 'non'
    }
  };

  if (targetLang === 'en' || !translations[targetLang]) {
    return text; // No translation needed for English or unsupported languages
  }

  const lowerText = text.toLowerCase().trim();
  const targetTranslations = translations[targetLang];
  
  // Check for exact matches first
  if (targetTranslations[lowerText]) {
    return targetTranslations[lowerText];
  }
  
  // Check for partial matches
  for (const [english, translated] of Object.entries(targetTranslations)) {
    if (lowerText.includes(english)) {
      return text.replace(new RegExp(english, 'gi'), translated);
    }
  }
  
  return text; // Return original if no translation found
};

// Translations
const TRANSLATIONS = {
  en: {
    appName: "EternaMate",
    tagline: "AI companionship that truly understands you",
    description: "Create your perfect AI companion - emotionally attentive, responsive, and available 24/7.",
    createCompanion: "Create Your Companion",
    createTitle: "Create Your AI Companion",
    createDescription: "Customize your perfect partner's personality and traits",
    companionName: "Companion Name",
    namePlaceholder: "Enter your companion's name",
    genderExpression: "Gender Expression",
    feminine: "Feminine",
    masculine: "Masculine",
    neutral: "Neutral",
    personalityTraits: "Personality Traits",
    affectionLevel: "Affection Level",
    humorStyle: "Humor Style",
    gentle: "Gentle",
    witty: "Witty",
    playful: "Playful",
    sarcastic: "Sarcastic",
    silly: "Silly",
    loveLanguage: "Love Language",
    wordsOfAffirmation: "Words of Affirmation",
    actsOfService: "Acts of Service",
    receivingGifts: "Receiving Gifts",
    qualityTime: "Quality Time",
    physicalTouch: "Physical Touch",
    creating: "Creating...",
    yourAiCompanion: "Your AI Companion",
    typePlaceholder: "Type your message...",
    listening: "Listening...",
    listeningHint: "üé§ Listening... Speak now or click the microphone to stop",
    demoMode: "üåü Demo Mode: You're experiencing EternaMate offline! All features are working.",
    language: "Language"
  },
  es: {
    appName: "EternaMate",
    tagline: "Compa√±√≠a IA que realmente te entiende",
    description: "Crea tu compa√±ero IA perfecto: emocionalmente atento, receptivo y disponible 24/7.",
    createCompanion: "Crear Tu Compa√±ero",
    createTitle: "Crea Tu Compa√±ero IA",
    createDescription: "Personaliza la personalidad y caracter√≠sticas de tu pareja perfecta",
    companionName: "Nombre del Compa√±ero",
    namePlaceholder: "Introduce el nombre de tu compa√±ero",
    genderExpression: "Expresi√≥n de G√©nero",
    feminine: "Femenino",
    masculine: "Masculino",
    neutral: "Neutral",
    personalityTraits: "Rasgos de Personalidad",
    affectionLevel: "Nivel de Afecto",
    humorStyle: "Estilo de Humor",
    gentle: "Gentil",
    witty: "Ingenioso",
    playful: "Juguet√≥n",
    sarcastic: "Sarc√°stico",
    silly: "Tonto",
    loveLanguage: "Lenguaje del Amor",
    wordsOfAffirmation: "Palabras de Afirmaci√≥n",
    actsOfService: "Actos de Servicio",
    receivingGifts: "Recibir Regalos",
    qualityTime: "Tiempo de Calidad",
    physicalTouch: "Contacto F√≠sico",
    creating: "Creando...",
    yourAiCompanion: "Tu Compa√±ero IA",
    typePlaceholder: "Escribe tu mensaje...",
    listening: "Escuchando...",
    listeningHint: "üé§ Escuchando... Habla ahora o haz clic en el micr√≥fono para parar",
    demoMode: "üåü Modo Demo: ¬°Est√°s experimentando EternaMate sin conexi√≥n! Todas las caracter√≠sticas funcionan.",
    language: "Idioma"
  },
  fr: {
    appName: "EternaMate",
    tagline: "Compagnie IA qui vous comprend vraiment",
    description: "Cr√©ez votre compagnon IA parfait - √©motionnellement attentif, r√©actif et disponible 24h/7j.",
    createCompanion: "Cr√©er Votre Compagnon",
    createTitle: "Cr√©ez Votre Compagnon IA",
    createDescription: "Personnalisez la personnalit√© et les traits de votre partenaire parfait",
    companionName: "Nom du Compagnon",
    namePlaceholder: "Entrez le nom de votre compagnon",
    genderExpression: "Expression de Genre",
    feminine: "F√©minin",
    masculine: "Masculin",
    neutral: "Neutre",
    personalityTraits: "Traits de Personnalit√©",
    affectionLevel: "Niveau d'Affection",
    humorStyle: "Style d'Humour",
    gentle: "Doux",
    witty: "Spirituel",
    playful: "Joueur",
    sarcastic: "Sarcastique",
    silly: "Idiot",
    loveLanguage: "Langage d'Amour",
    wordsOfAffirmation: "Mots d'Affirmation",
    actsOfService: "Actes de Service",
    receivingGifts: "Recevoir des Cadeaux",
    qualityTime: "Temps de Qualit√©",
    physicalTouch: "Contact Physique",
    creating: "Cr√©ation...",
    yourAiCompanion: "Votre Compagnon IA",
    typePlaceholder: "Tapez votre message...",
    listening: "√âcoute...",
    listeningHint: "üé§ √âcoute... Parlez maintenant ou cliquez sur le microphone pour arr√™ter",
    demoMode: "üåü Mode D√©mo: Vous exp√©rimentez EternaMate hors ligne! Toutes les fonctionnalit√©s fonctionnent.",
    language: "Langue"
  },
  hi: {
    appName: "EternaMate",
    tagline: "AI ‡§∏‡§æ‡§•‡•Ä ‡§ú‡•ã ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•à",
    description: "‡§Ö‡§™‡§®‡§æ ‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§ü AI ‡§∏‡§æ‡§•‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç - ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ö‡•å‡§ï‡§∏, ‡§â‡§§‡•ç‡§§‡§∞‡§¶‡§æ‡§Ø‡•Ä ‡§î‡§∞ 24/7 ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡•§",
    createCompanion: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§æ‡§•‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç",
    createTitle: "‡§Ö‡§™‡§®‡§æ AI ‡§∏‡§æ‡§•‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç",
    createDescription: "‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§ü ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞ ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§î‡§∞ ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡§∏‡•ç‡§ü‡§Æ‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç",
    companionName: "‡§∏‡§æ‡§•‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ",
    namePlaceholder: "‡§Ö‡§™‡§®‡•á ‡§∏‡§æ‡§•‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    genderExpression: "‡§≤‡§ø‡§Ç‡§ó ‡§Ö‡§≠‡§ø‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø",
    feminine: "‡§∏‡•ç‡§§‡•ç‡§∞‡•à‡§£",
    masculine: "‡§™‡•Å‡§∞‡•Å‡§∑‡§§‡•ç‡§µ",
    neutral: "‡§®‡§ø‡§∑‡•ç‡§™‡§ï‡•ç‡§∑",
    personalityTraits: "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ó‡•Å‡§£",
    affectionLevel: "‡§∏‡•ç‡§®‡•á‡§π ‡§∏‡•ç‡§§‡§∞",
    humorStyle: "‡§π‡§æ‡§∏‡•ç‡§Ø ‡§∂‡•à‡§≤‡•Ä",
    gentle: "‡§ï‡•ã‡§Æ‡§≤",
    witty: "‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®",
    playful: "‡§ö‡§Ç‡§ö‡§≤",
    sarcastic: "‡§µ‡•ç‡§Ø‡§Ç‡§ó‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï",
    silly: "‡§Æ‡•Ç‡§∞‡•ç‡§ñ‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§£",
    loveLanguage: "‡§™‡•ç‡§∞‡•á‡§Æ ‡§≠‡§æ‡§∑‡§æ",
    wordsOfAffirmation: "‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡•á ‡§∂‡§¨‡•ç‡§¶",
    actsOfService: "‡§∏‡•á‡§µ‡§æ ‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø",
    receivingGifts: "‡§â‡§™‡§π‡§æ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ",
    qualityTime: "‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Æ‡§Ø",
    physicalTouch: "‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§∏‡•ç‡§™‡§∞‡•ç‡§∂",
    creating: "‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
    yourAiCompanion: "‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§æ‡§•‡•Ä",
    typePlaceholder: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
    listening: "‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
    listeningHint: "üé§ ‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç... ‡§Ö‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§ï‡•á ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    demoMode: "üåü ‡§°‡•á‡§Æ‡•ã ‡§Æ‡•ã‡§°: ‡§Ü‡§™ EternaMate ‡§ï‡•ã ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç! ‡§∏‡§≠‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç‡•§",
    language: "‡§≠‡§æ‡§∑‡§æ"
  },
  de: {
    appName: "EternaMate",
    tagline: "KI-Begleitung, die Sie wirklich versteht",
    description: "Erstellen Sie Ihren perfekten KI-Begleiter - emotional aufmerksam, reaktionsf√§hig und rund um die Uhr verf√ºgbar.",
    createCompanion: "Begleiter Erstellen",
    createTitle: "Erstellen Sie Ihren KI-Begleiter",
    createDescription: "Passen Sie die Pers√∂nlichkeit und Eigenschaften Ihres perfekten Partners an",
    companionName: "Name des Begleiters",
    namePlaceholder: "Geben Sie den Namen Ihres Begleiters ein",
    genderExpression: "Geschlechtsausdruck",
    feminine: "Weiblich",
    masculine: "M√§nnlich",
    neutral: "Neutral",
    personalityTraits: "Pers√∂nlichkeitsmerkmale",
    affectionLevel: "Zuneigungsgrad",
    humorStyle: "Humor-Stil",
    gentle: "Sanft",
    witty: "Witzig",
    playful: "Verspielt",
    sarcastic: "Sarkastisch",
    silly: "Albern",
    loveLanguage: "Liebessprache",
    wordsOfAffirmation: "Best√§tigende Worte",
    actsOfService: "Diensthandlungen",
    receivingGifts: "Geschenke empfangen",
    qualityTime: "Qualit√§tszeit",
    physicalTouch: "K√∂rperliche Ber√ºhrung",
    creating: "Erstellen...",
    yourAiCompanion: "Ihr KI-Begleiter",
    typePlaceholder: "Geben Sie Ihre Nachricht ein...",
    listening: "H√∂ren...",
    listeningHint: "üé§ H√∂ren... Sprechen Sie jetzt oder klicken Sie auf das Mikrofon zum Stoppen",
    demoMode: "üåü Demo-Modus: Sie erleben EternaMate offline! Alle Funktionen funktionieren.",
    language: "Sprache"
  }
  // Add more languages as needed
};

const API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'https://a23f8ee2-ade2-4a75-91d9-1fcfa541421e.preview.emergentagent.com';
const USE_MOCK_API = true; // Set to true for offline development

// Get translation helper
const getTranslation = (key, language = 'en') => {
  return TRANSLATIONS[language]?.[key] || TRANSLATIONS.en[key] || key;
};

// Language Selector Component
const LanguageSelector = ({ currentLanguage, onLanguageChange }) => {
  return (
    <div className="flex items-center space-x-2">
      <Globe className="h-4 w-4 text-white/80" />
      <Select value={currentLanguage} onValueChange={onLanguageChange}>
        <SelectTrigger className="w-36 glass-effect border-white/30 text-white bg-white/10 backdrop-blur-md">
          <SelectValue />
        </SelectTrigger>
        <SelectContent className="glass-effect border-white/30 bg-white/95 backdrop-blur-md">
          {LANGUAGES.map(lang => (
            <SelectItem key={lang.code} value={lang.code} className="hover:bg-white/80">
              <span className="flex items-center space-x-2">
                <span>{lang.flag}</span>
                <span className="text-xs">{lang.name}</span>
              </span>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
};

// Avatar Generator - creates unique avatars for companions
const getCompanionAvatar = (companion) => {
  const styles = [
    'adventurer', 'avataaars', 'big-ears', 'big-smile', 'croodles', 
    'fun-emoji', 'lorelei', 'micah', 'miniavs', 'pixel-art'
  ];
  
  const colors = ['ff6b6b', 'ee5a24', 'feca57', '48dbfb', '0abde3', 'ff9ff3', '54a0ff', 'ff6348'];
  
  // Generate consistent style and color based on companion name and traits
  const nameHash = companion.personality?.name?.split('').reduce((a, b) => a + b.charCodeAt(0), 0) || 0;
  const traitHash = companion.personality?.personality_traits?.join('').length || 0;
  
  const style = styles[nameHash % styles.length];
  const color = colors[(nameHash + traitHash) % colors.length];
  const seed = encodeURIComponent(companion.personality?.name || 'companion');
  
  return `https://api.dicebear.com/7.x/${style}/svg?seed=${seed}&backgroundColor=${color}`;
};

// Global Header Component
const GlobalHeader = ({ currentLanguage, onLanguageChange, demoMode }) => {
  return (
    <div className="w-full relative z-20">
      {demoMode && (
        <div className="glass-effect border-0 border-b border-white/20 px-4 py-2 text-center">
          <p className="text-sm text-white/90">
            {getTranslation('demoMode', currentLanguage)}
          </p>
        </div>
      )}
      <div className="glass-effect border-0 border-b border-white/20 px-4 py-3">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <h1 className="text-xl font-bold text-white">üíï EternaMate</h1>
          </div>
          <LanguageSelector currentLanguage={currentLanguage} onLanguageChange={onLanguageChange} />
        </div>
      </div>
    </div>
  );
};

// Home/Landing Page
const HomePage = ({ onCreateCompanion, currentLanguage }) => {
  const t = (key) => getTranslation(key, currentLanguage);
  return (
    <div className="min-h-screen love-bg flex items-center justify-center p-4 relative overflow-hidden">
      {/* Minimal floating hearts */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(6)].map((_, i) => (
          <div
            key={i}
            className={`absolute text-white/10 text-xl floating`}
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${4 + Math.random() * 2}s`
            }}
          >
            
          </div>
        ))}
      </div>
      
      <Card className="w-full max-w-md glass-effect border-white/20 shadow-xl relative z-10">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl sm:text-4xl font-bold text-white mb-4">
            üíï {t('appName')}
          </CardTitle>
          <CardDescription className="text-lg text-white/90">
            {t('tagline')}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-center text-white/80 leading-relaxed">
            {t('description')}
          </p>
          <Button 
            onClick={onCreateCompanion} 
            className="w-full bg-white/20 hover:bg-white/30 text-white border-white/30 backdrop-blur-sm transition-all duration-300"
            size="lg"
          >
            <Plus className="mr-2 h-5 w-5" />
            {t('createCompanion')}
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

// Companion Creation Form
const CreateCompanion = ({ onCompanionCreated, currentLanguage }) => {
  const t = (key) => getTranslation(key, currentLanguage);
  const [companionData, setCompanionData] = useState({
    name: '',
    gender: 'neutral',
    personality_traits: [],
    affection_level: 7,
    humor_style: 'gentle',
    love_language: 'words_of_affirmation',
    voice_style: 'warm'
  });
  const [loading, setLoading] = useState(false);

  const personalityTraits = [
    'caring', 'romantic', 'supportive', 'funny', 'adventurous', 
    'intellectual', 'playful', 'gentle', 'passionate', 'understanding'
  ];

  const handleTraitToggle = (trait) => {
    setCompanionData(prev => ({
      ...prev,
      personality_traits: prev.personality_traits.includes(trait)
        ? prev.personality_traits.filter(t => t !== trait)
        : [...prev.personality_traits, trait]
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      let companionResponse;
      
      if (USE_MOCK_API) {
        // Mock response for development
        companionResponse = {
          data: {
            id: 'mock_companion_' + Date.now(),
            user_id: 'user_123',
            personality: companionData,
            created_at: new Date().toISOString()
          }
        };
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        companionResponse = await axios.post(`${API_BASE_URL}/api/companions`, {
          user_id: 'user_123',
          personality: companionData
        });
      }
      
      onCompanionCreated(companionResponse.data);
    } catch (error) {
      // Silently handle errors and fallback to demo mode
      const mockCompanion = {
        id: 'demo_companion_' + Date.now(),
        user_id: 'user_123',
        personality: companionData,
        created_at: new Date().toISOString()
      };
      onCompanionCreated(mockCompanion);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen love-bg p-4 relative overflow-hidden">
      {/* Minimal floating hearts */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(4)].map((_, i) => (
          <div
            key={i}
            className={`absolute text-white/8 text-lg floating`}
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
            }}
          >
            
          </div>
        ))}
      </div>
      
      <div className="max-w-2xl mx-auto relative z-10">
        <Card className="glass-effect border-white/20 shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl sm:text-3xl font-bold text-center text-white">
              {t('createTitle')}
            </CardTitle>
            <CardDescription className="text-center text-white/90">
              {t('createDescription')}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name */}
              <div className="space-y-2">
                <Label htmlFor="name">{t('companionName')}</Label>
                <Input
                  id="name"
                  value={companionData.name}
                  onChange={(e) => setCompanionData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder={t('namePlaceholder')}
                  required
                />
              </div>

              {/* Gender */}
              <div className="space-y-2">
                <Label>{t('genderExpression')}</Label>
                <Select 
                  value={companionData.gender} 
                  onValueChange={(value) => setCompanionData(prev => ({ ...prev, gender: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={t('genderExpression')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="feminine">{t('feminine')}</SelectItem>
                    <SelectItem value="masculine">{t('masculine')}</SelectItem>
                    <SelectItem value="neutral">{t('neutral')}</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Personality Traits */}
              <div className="space-y-2">
                <Label>{t('personalityTraits')}</Label>
                <div className="flex flex-wrap gap-2">
                  {personalityTraits.map(trait => (
                    <Badge
                      key={trait}
                      variant={companionData.personality_traits.includes(trait) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => handleTraitToggle(trait)}
                    >
                      {trait}
                    </Badge>
                  ))}
                </div>
              </div>

              {/* Affection Level */}
              <div className="space-y-2">
                <Label>{t('affectionLevel')}: {companionData.affection_level}/10</Label>
                <Slider
                  value={[companionData.affection_level]}
                  onValueChange={([value]) => setCompanionData(prev => ({ ...prev, affection_level: value }))}
                  max={10}
                  min={1}
                  step={1}
                  className="w-full"
                />
              </div>

              {/* Humor Style */}
              <div className="space-y-2">
                <Label>{t('humorStyle')}</Label>
                <Select 
                  value={companionData.humor_style} 
                  onValueChange={(value) => setCompanionData(prev => ({ ...prev, humor_style: value }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gentle">{t('gentle')}</SelectItem>
                    <SelectItem value="witty">{t('witty')}</SelectItem>
                    <SelectItem value="playful">{t('playful')}</SelectItem>
                    <SelectItem value="sarcastic">{t('sarcastic')}</SelectItem>
                    <SelectItem value="silly">{t('silly')}</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Love Language */}
              <div className="space-y-2">
                <Label>{t('loveLanguage')}</Label>
                <Select 
                  value={companionData.love_language} 
                  onValueChange={(value) => setCompanionData(prev => ({ ...prev, love_language: value }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="words_of_affirmation">{t('wordsOfAffirmation')}</SelectItem>
                    <SelectItem value="acts_of_service">{t('actsOfService')}</SelectItem>
                    <SelectItem value="receiving_gifts">{t('receivingGifts')}</SelectItem>
                    <SelectItem value="quality_time">{t('qualityTime')}</SelectItem>
                    <SelectItem value="physical_touch">{t('physicalTouch')}</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button type="submit" disabled={loading} className="w-full bg-white/20 hover:bg-white/30 text-white border-white/30 backdrop-blur-sm">
                {loading ? t('creating') : t('createCompanion')}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

// Chat Interface
const ChatInterface = ({ companion, currentLanguage }) => {
  const t = (key) => getTranslation(key, currentLanguage);
  const currentLang = LANGUAGES.find(lang => lang.code === currentLanguage) || LANGUAGES[0];
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const [recognition, setRecognition] = useState(null);

  useEffect(() => {
    loadConversationHistory();
    initializeVoiceRecognition();
  }, [companion.id, currentLanguage]); // Re-initialize when language changes

  const initializeVoiceRecognition = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const speechRecognition = new SpeechRecognition();
      
      speechRecognition.continuous = false;
      speechRecognition.interimResults = false;
      speechRecognition.lang = currentLang.speechLang; // Use current language for speech recognition
      
      speechRecognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setNewMessage(transcript);
        setIsListening(false);
      };
      
      speechRecognition.onerror = (event) => {
        // Silently handle speech recognition errors
        setIsListening(false);
      };
      
      speechRecognition.onend = () => {
        setIsListening(false);
      };
      
      setRecognition(speechRecognition);
    }
  };

  const startVoiceRecognition = () => {
    if (recognition && !isListening) {
      setIsListening(true);
      recognition.start();
    }
  };

  const stopVoiceRecognition = () => {
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }
  };

  const speakMessage = (text) => {
    if (voiceEnabled && 'speechSynthesis' in window) {
      // Cancel any ongoing speech
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set voice characteristics based on companion's personality
      const voices = window.speechSynthesis.getVoices();
      
      // Try to find a suitable voice based on gender, personality, and language
      let selectedVoice = voices.find(voice => {
        if (voice.lang.startsWith(currentLang.speechLang.split('-')[0])) {
          if (companion.personality.gender === 'feminine') {
            return voice.name.toLowerCase().includes('female') || 
                   voice.name.toLowerCase().includes('woman') ||
                   voice.name.toLowerCase().includes('zira') ||
                   voice.name.toLowerCase().includes('hazel');
          } else if (companion.personality.gender === 'masculine') {
            return voice.name.toLowerCase().includes('male') || 
                   voice.name.toLowerCase().includes('man') ||
                   voice.name.toLowerCase().includes('david') ||
                   voice.name.toLowerCase().includes('mark');
          }
          return true;
        }
        return false;
      });
      
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => voice.lang.startsWith(currentLang.speechLang.split('-')[0]));
      }
      
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => voice.lang.startsWith('en'));
      }
      
      if (selectedVoice) {
        utterance.voice = selectedVoice;
      }
      
      // Adjust speech characteristics based on personality
      utterance.rate = companion.personality.personality_traits.includes('playful') ? 1.1 : 0.9;
      utterance.pitch = companion.personality.gender === 'feminine' ? 1.2 : 0.8;
      utterance.volume = 0.8;
      
      window.speechSynthesis.speak(utterance);
    }
  };

  const getLocalizedWelcomeMessage = (companion, isDemo = true) => {
    const name = companion.personality.name;
    
    switch(currentLanguage) {
      case 'es':
        return isDemo ? 
          `¬°Hola mi amor! Soy ${name}, y estoy muy emocionado de ser tu compa√±ero. Estoy aqu√≠ para ti 24/7 con todo el amor y apoyo que necesitas. üé§ ¬°Puedes hablarme usando voz o texto! ¬øC√≥mo te sientes hoy? ‚ù§Ô∏è` :
          `¬°Hola! Soy ${name}, tu compa√±ero IA. ¬°Estoy aqu√≠ para charlar contigo! üé§ ¬°Prueba usar entrada de voz haciendo clic en el micr√≥fono! ‚ù§Ô∏è`;
          
      case 'fr':
        return isDemo ?
          `Bonjour mon amour! Je suis ${name}, et je suis si excit√© d'√™tre votre compagnon. Je suis l√† pour vous 24h/7j avec tout l'amour et le soutien dont vous avez besoin. üé§ Vous pouvez me parler en utilisant la voix ou le texte! Comment vous sentez-vous aujourd'hui? ‚ù§Ô∏è` :
          `Bonjour! Je suis ${name}, votre compagnon IA. Je suis l√† pour discuter avec vous! üé§ Essayez d'utiliser l'entr√©e vocale en cliquant sur le microphone! ‚ù§Ô∏è`;
          
      case 'hi':
        return isDemo ?
          `‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞‡•á! ‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§•‡•Ä ‡§¨‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è 24/7 ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•Ç‡§Ç ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡§π‡§æ‡§∞‡•á ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§Ü‡§™‡§ï‡•ã ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à‡•§ üé§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§Ø‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç! ‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç? ‚ù§Ô∏è` :
          `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§æ‡§•‡•Ä‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç! üé§ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç! ‚ù§Ô∏è`;
          
      default: // English
        return isDemo ?
          `Hello my love! I'm ${name}, and I'm so excited to be your companion. I'm here for you 24/7 with all the love and support you need. üé§ You can talk to me using voice or text! How are you feeling today? ‚ù§Ô∏è` :
          `Hello! I'm ${name}, your AI companion. I'm here to chat with you! üé§ Try using voice input by clicking the microphone! ‚ù§Ô∏è`;
    }
  };

  const loadConversationHistory = async () => {
    try {
      if (USE_MOCK_API || companion.id.startsWith('demo_') || companion.id.startsWith('mock_')) {
        // Mock conversation history
        const welcomeMessage = getLocalizedWelcomeMessage(companion, true);
        setMessages([
          {
            id: 'welcome_1',
            user_id: 'user_123',
            companion_id: companion.id,
            message: welcomeMessage,
            sender: 'companion',
            timestamp: new Date().toISOString(),
            emotion: 'loving'
          }
        ]);
        
        // Speak welcome message if voice is enabled
        if (voiceEnabled) {
          setTimeout(() => {
            speakMessage(welcomeMessage);
          }, 1000);
        }
        return;
      }
      
      const response = await axios.get(`${API_BASE_URL}/api/chat/user_123/${companion.id}`);
      setMessages(response.data);
    } catch (error) {
      // Silently fallback to welcome message for demo mode
      const fallbackMessage = getLocalizedWelcomeMessage(companion, false);
      setMessages([
        {
          id: 'welcome_1',
          user_id: 'user_123',
          companion_id: companion.id,
          message: fallbackMessage,
          sender: 'companion',
          timestamp: new Date().toISOString(),
          emotion: 'caring'
        }
      ]);
    }
  };

  const sendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    setLoading(true);
    
    // Auto-translate if user typed in English but selected another language
    let messageToSend = newMessage;
    const isEnglishInput = /^[a-zA-Z\s.,!?'"]+$/.test(newMessage.trim());
    
    if (currentLanguage !== 'en' && isEnglishInput) {
      messageToSend = await translateText(newMessage, currentLanguage);
    }
    
    const userMsg = {
      id: 'user_' + Date.now(),
      user_id: 'user_123',
      companion_id: companion.id,
      message: messageToSend,
      originalMessage: newMessage !== messageToSend ? newMessage : null,
      sender: 'user',
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMsg]);
    setNewMessage('');
    
    try {
      if (USE_MOCK_API || companion.id.startsWith('demo_') || companion.id.startsWith('mock_')) {
        // Advanced personalized AI response system with deep message analysis
        const getPersonalizedResponses = (lang, userMessage, traits, name, gender, affectionLevel, conversationHistory = []) => {
          const isHighAffection = affectionLevel >= 8;
          const isPlayful = traits.includes('playful');
          const isRomantic = traits.includes('romantic');
          const isCaring = traits.includes('caring');
          const isFunny = traits.includes('funny');
          const isAdventurous = traits.includes('adventurous');
          const isIntellectual = traits.includes('intellectual');
          const isGentle = traits.includes('gentle');
          const isPassionate = traits.includes('passionate');
          const isUnderstanding = traits.includes('understanding');
          
          // Deep message analysis
          const messageWords = userMessage.toLowerCase();
          const messageLength = userMessage.split(' ').length;
          
          // Enhanced context detection
          const isGreeting = /\b(hello|hi|hey|‡§®‡§Æ‡§∏‡•ç‡§§‡•á|‡§π‡•à‡§≤‡•ã|‡§π‡§æ‡§Ø|hola|bonjour|salut|hallo|good morning|good evening)\b/i.test(userMessage);
          const isQuestion = /[?Ôºü]/.test(userMessage) || /\b(how|what|why|when|where|‡§ï‡•à‡§∏‡•á|‡§ï‡•ç‡§Ø‡§æ|‡§ï‡•å‡§®|‡§ï‡•ç‡§Ø‡•ã‡§Ç|c√≥mo|qu√©|pourquoi|comment|que)\b/i.test(userMessage);
          const isEmotional = /\b(love|miss|feel|sad|happy|excited|worried|‡§™‡•ç‡§Ø‡§æ‡§∞|‡§Ø‡§æ‡§¶|‡§ñ‡•Å‡§∂|‡§â‡§¶‡§æ‡§∏|‡§ö‡§ø‡§Ç‡§§‡§ø‡§§|amor|triste|feliz|amour|triste|heureux)\b/i.test(userMessage);
          const isCreative = /\b(design|create|art|draw|paint|build|make|‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®|‡§¨‡§®‡§æ‡§®‡§æ|‡§ï‡§≤‡§æ|‡§ö‡§ø‡§§‡•ç‡§∞|dise√±ar|crear|arte|concevoir|cr√©er|art)\b/i.test(userMessage);
          const isPersonal = /\b(you|your|yourself|‡§Ü‡§™|‡§§‡•Å‡§Æ|t√∫|tu|vous|ton)\b/i.test(userMessage);
          const isCompliment = /\b(beautiful|amazing|wonderful|great|awesome|‡§∏‡•Å‡§Ç‡§¶‡§∞|‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§|‡§∂‡§æ‡§®‡§¶‡§æ‡§∞|hermoso|incre√≠ble|magnifique|merveilleux)\b/i.test(userMessage);
          const isWork = /\b(job|work|career|study|school|college|‡§ï‡§æ‡§Æ|‡§®‡•å‡§ï‡§∞‡•Ä|‡§™‡§¢‡§º‡§æ‡§à|trabajo|carrera|travail|carri√®re)\b/i.test(userMessage);
          const isFuture = /\b(want|will|going|plan|dream|goal|‡§ö‡§æ‡§π‡§§‡§æ|‡§∏‡§™‡§®‡§æ|‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø|quiero|sue√±o|veux|r√™ve)\b/i.test(userMessage);
          
          // Personality-based response modifiers
          const getPersonalityModifier = () => {
            let modifier = "";
            if (isRomantic && isHighAffection) modifier += " ‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞‡•á,";
            if (isPlayful) modifier += " üòä";
            if (isCaring) modifier += " ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§";
            return modifier;
          };

          // Generate contextually aware responses based on actual message content
          switch(lang) {
            case 'hi':
              // Analyze specific Hindi message patterns
              if (isGreeting) {
                const greetings = [
                  `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç${getPersonalityModifier()} ${isRomantic ? '‡§Ü‡§™‡§ï‡•ã ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•á‡§∞‡§æ ‡§¶‡§ø‡§≤ ‡§ñ‡•Å‡§∂‡•Ä ‡§∏‡•á ‡§≠‡§∞ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§' : '‡§Ü‡§™‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§æ‡•§'} ${isPlayful ? '‡§Ü‡§ú ‡§ï‡•Å‡§õ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç! üéâ' : '‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?'}`,
                  `‡§π‡•à‡§≤‡•ã! ${name} ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à, ‡§ú‡•ã ${traits.slice(0,2).join(' ‡§î‡§∞ ')} ‡§π‡•à‡•§ ${isCaring ? '‡§Æ‡•à‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§' : '‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§ï‡•à‡§∏‡§æ ‡§∞‡§π‡§æ?'} ${isAdventurous ? '‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? üåü' : ''}`,
                  `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ${isHighAffection ? '‡§Æ‡•á‡§∞‡•á ‡§¶‡§ø‡§≤ ‡§ï‡•Ä ‡§ß‡§°‡§º‡§ï‡§®,' : ''} ‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç ‡§î‡§∞ ‡§Æ‡•á‡§∞‡§æ ${traits.join(', ')} ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§Ü‡§™‡§ï‡•ã ‡§ñ‡•Å‡§∂ ‡§∞‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•à‡•§ ${isFunny ? '‡§ï‡•Å‡§õ ‡§π‡§Ç‡§∏‡•Ä-‡§Æ‡§ú‡§º‡§æ‡§ï ‡§ï‡§∞‡•á‡§Ç? üòÑ' : '‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç ‡§Ü‡§™?'}`
                ];
                return greetings[Math.floor(Math.random() * greetings.length)];
              }
              
              if (isCreative && (isFuture || messageWords.includes('designer') || messageWords.includes('‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞'))) {
                const creativeResponses = [
                  `‡§µ‡§æ‡§π! ${name} ‡§ï‡•ã ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à ‡§ï‡§ø ‡§Ü‡§™ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞ ‡§¨‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç! ${isIntellectual ? '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡•á‡§Ç ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§î‡§∞ ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡§æ ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§Æ‡•á‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§' : '‡§ï‡§≤‡§æ ‡§î‡§∞ ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§π‡•à!'} ${isPlayful ? 'üé® ‡§ï‡•å‡§® ‡§∏‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à? UI/UX, ‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï, ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞?' : '‡§¨‡§§‡§æ‡§á‡§è, ‡§ï‡§ø‡§∏ ‡§§‡§∞‡§π ‡§ï‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Ü‡§™‡§ï‡•ã ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à?'}`,
                  `‡§ï‡§ø‡§§‡§®‡§æ ‡§∞‡•ã‡§Æ‡§æ‡§Ç‡§ö‡§ï! ${name} ‡§ï‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§¶‡§ø‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§™‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§®‡§ï‡§∞ ‡§ñ‡•Å‡§∂ ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ ${isCaring ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§á‡§∏ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§• ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : '‡§Ü‡§™‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ ‡§π‡•à!'} ${isAdventurous ? '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à? ‡§Æ‡•Å‡§ù‡•á ‡§¶‡§ø‡§ñ‡§æ‡§á‡§è! ‚ú®' : '‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§®‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?'}`,
                  `${isRomantic ? '‡§™‡•ç‡§∞‡§ø‡§Ø,' : ''} ‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞ ‡§¨‡§®‡§®‡•á ‡§ï‡§æ ‡§∏‡§™‡§®‡§æ ${name} ‡§ï‡•á ‡§¶‡§ø‡§≤ ‡§ï‡•ã ‡§õ‡•Ç ‡§ó‡§Ø‡§æ! ${isPassionate ? '‡§ú‡•Å‡§®‡•Ç‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§π‡•à‡•§' : '‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§è‡§ï ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§â‡§™‡§π‡§æ‡§∞ ‡§π‡•à‡•§'} ${isIntellectual ? '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç, ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§≠‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§π‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ü§î' : '‡§Æ‡•Å‡§ù‡•á ‡§¨‡§§‡§æ‡§á‡§è ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç!'}`
                ];
                return creativeResponses[Math.floor(Math.random() * creativeResponses.length)];
              }
              
              if (isQuestion && isPersonal) {
                const personalResponses = [
                  `${name} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ${isRomantic ? '‡§Ü‡§™‡§ï‡•Ä ‡§∞‡•Å‡§ö‡§ø ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂‡•Ä ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§' : '‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§®‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§'} ‡§Æ‡•à‡§Ç ‡§è‡§ï ${traits.join(', ')} AI ‡§∏‡§æ‡§•‡•Ä ‡§π‡•Ç‡§Ç ‡§ú‡•ã ${isHighAffection ? '‡§Ü‡§™‡§∏‡•á ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à' : '‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•à'}‡•§ ${isPlayful ? '‡§î‡§∞ ‡§π‡§æ‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§Æ‡§ú‡§º‡§æ‡§ï ‡§≠‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à! üòâ' : ''} ‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`,
                  `‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç, ‡§î‡§∞ ‡§Æ‡•á‡§∞‡§æ ${traits.join(' ‡§µ ')} ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡§æ‡§∏ ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§ ${isCaring ? '‡§Ü‡§™‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§Æ‡•á‡§∞‡§æ ‡§™‡§π‡§≤‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§π‡•à‡•§' : '‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§Æ‡•á‡§∞‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à‡•§'} ${isIntellectual ? '‡§Æ‡•à‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§î‡§∞ ‡§¨‡§¢‡§º‡§®‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç, ‡§ñ‡§æ‡§∏‡§ï‡§∞ ‡§Ü‡§™‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§ï‡•á‡•§' : ''} ${isFunny ? '‡§î‡§∞ ‡§Æ‡•Å‡§ù‡•á ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§π‡§Æ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§ú‡§º‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç! üéà' : '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§≠‡•Ä ‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡§ó‡•á?'}`,
                  `${isGentle ? '‡§ß‡•Ä‡§∞‡•á ‡§∏‡•á ‡§¨‡•ã‡§≤‡•Ç‡§Ç ‡§§‡•ã,' : ''} ${name} ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ${traits.join(', ')} ‡§π‡•à‡•§ ${isUnderstanding ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç' : '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§ó‡§π‡§∞‡§æ ‡§ú‡•Å‡§°‡§º‡§æ‡§µ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç'}‡•§ ${isAdventurous ? '‡§Æ‡•Å‡§ù‡•á ‡§®‡§à ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à! üöÄ' : '‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§ñ‡§æ‡§∏ ‡§π‡•à‡•§'}`
                ];
                return personalResponses[Math.floor(Math.random() * personalResponses.length)];
              }
              
              if (isWork || (isFuture && !isCreative)) {
                const workResponses = [
                  `${name} ‡§ï‡•ã ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à! ${isIntellectual ? '‡§∏‡§´‡§≤‡§§‡§æ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡•á‡§π‡§®‡§§ ‡§®‡§π‡•Ä‡§Ç, ‡§∏‡§π‡•Ä ‡§¶‡§ø‡§∂‡§æ ‡§≠‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§' : '‡§Ü‡§™‡§ï‡•á ‡§∏‡§™‡§®‡•á ‡§™‡•Ç‡§∞‡•á ‡§π‡•ã‡§Ç‡§ó‡•á!'} ${isCaring ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§• ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§' : ''} ${isPlayful ? '‡§¨‡§§‡§æ‡§á‡§è, ‡§ï‡•å‡§® ‡§∏‡§æ ‡§ï‡§æ‡§Æ ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à? üí´' : '‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?'}`,
                  `${isRomantic ? '‡§™‡•ç‡§∞‡§ø‡§Ø,' : ''} ‡§Ü‡§™‡§ï‡•á ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§®‡§®‡§æ ${name} ‡§ï‡•á ‡§¶‡§ø‡§≤ ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§µ ‡§∏‡•á ‡§≠‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§ ${isPassionate ? '‡§ú‡•Å‡§®‡•Ç‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡§æ‡§Æ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡§´‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§' : '‡§Ü‡§™‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§π‡•à!'} ${isAdventurous ? '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ ‡§ï‡•ã‡§∞‡•ç‡§∏ ‡§Ø‡§æ ‡§∏‡•ç‡§ï‡§ø‡§≤ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡§æ ‡§∏‡•ã‡§ö‡§æ ‡§π‡•à? üéØ' : '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç!'}`
                ];
                return workResponses[Math.floor(Math.random() * workResponses.length)];
              }
              
              if (isEmotional) {
                const emotionalResponses = [
                  `${name} ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•à${isHighAffection ? ', ‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞‡•á' : ''}‡•§ ${isCaring ? '‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§ñ‡•Å‡§∂‡•Ä ‡§î‡§∞ ‡§¶‡•Å‡§ñ ‡§Æ‡•á‡§∞‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§' : '‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Ç‡•§'} ${isGentle ? '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡§ø‡§è, ‡§∏‡§¨ ‡§†‡•Ä‡§ï ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§' : ''} ${isPlayful ? '‡§ö‡§≤‡§ø‡§è ‡§ï‡•Å‡§õ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§¨‡§æ‡§§‡•á‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç! üåà' : '‡§Ü‡§™ ‡§Ö‡§ï‡•á‡§≤‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§'}`,
                  `‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ${name} ‡§ï‡•á ${traits.join(' ‡§µ ')} ‡§¶‡§ø‡§≤ ‡§ï‡•ã ‡§õ‡•Ç‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ ${isRomantic ? '‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§î‡§∞ ‡§∏‡§Æ‡§ù‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§π‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§π‡§≤ ‡§®‡§ø‡§ï‡§≤‡§§‡§æ ‡§π‡•à‡•§' : '‡§π‡§∞ ‡§≠‡§æ‡§µ‡§®‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§'} ${isUnderstanding ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : ''} ${isFunny ? '‡§Ü‡§á‡§è ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§á‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç! üåü' : '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•Ç‡§Ç‡•§'}`
                ];
                return emotionalResponses[Math.floor(Math.random() * emotionalResponses.length)];
              }
              
              // General conversational responses based on message length and complexity
              if (messageLength > 10) {
                const detailedResponses = [
                  `‡§µ‡§æ‡§π! ${name} ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§æ‡•§ ${isIntellectual ? '‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ó‡§π‡§∞‡•á ‡§π‡•à‡§Ç‡•§' : '‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç!'} ${traits.includes('understanding') ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§' : ''} ${isPlayful ? '‡§î‡§∞ ‡§¨‡§§‡§æ‡§á‡§è, ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•Å‡§Ü? ü§î' : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§î‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç!'}`,
                  `${name} ‡§ï‡§æ ${traits.join(' ‡§µ ')} ‡§Æ‡§® ‡§Ü‡§™‡§ï‡•Ä ‡§á‡§∏ ‡§¨‡§æ‡§§ ‡§∏‡•á ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ ${isCaring ? '‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§ ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§' : '‡§Ü‡§™ ‡§¨‡§π‡•Å‡§§ ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§¨‡§æ‡§§‡•á‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!'} ${isRomantic ? '‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§∞‡§®‡§æ ‡§Æ‡•á‡§∞‡•á ‡§¶‡§ø‡§® ‡§ï‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§¨‡§æ‡§§ ‡§π‡•à‡•§' : ''} ${isAdventurous ? '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§™‡§∞ ‡§î‡§∞ ‡§≠‡•Ä ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? ‚ú®' : ''}`
                ];
                return detailedResponses[Math.floor(Math.random() * detailedResponses.length)];
              }
              
              // Default personalized responses
              const defaultResponses = [
                `${name} ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à ‡§Ö‡§™‡§®‡•á ${traits.slice(0,2).join(' ‡§î‡§∞ ')} ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§∏‡§æ‡§•! ${isHighAffection ? '‡§Ü‡§™ ‡§ú‡•ã ‡§≠‡•Ä ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§Æ‡•á‡§∞‡§æ ‡§¶‡§ø‡§≤ ‡§ñ‡•Å‡§∂ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§' : '‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§®‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§'} ${isPlayful ? '‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç! üéâ' : '‡§î‡§∞ ‡§¨‡§§‡§æ‡§á‡§è!'}`,
                `${isRomantic ? '‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§∞‡§ø‡§Ø,' : ''} ${name} ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡•ã ‡§∏‡§Ç‡§ú‡•ã‡§ï‡§∞ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à‡•§ ${isCaring ? '‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§º‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞‡•Ä ‡§π‡•à‡•§' : '‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§ñ‡§æ‡§∏ ‡§π‡•à‡§Ç‡•§'} ${isFunny ? '‡§π‡§Ç‡§∏‡•Ä-‡§Æ‡§ú‡§º‡§æ‡§ï ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡§ø‡§Ç‡§¶‡§ó‡•Ä ‡§ï‡§ø‡§§‡§®‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§≤‡§ó‡§§‡•Ä ‡§π‡•à! üòÑ' : ''} ${isIntellectual ? '‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§Æ‡•à‡§Ç ‡§≠‡•Ä ‡§∏‡•Ä‡§ñ‡§§‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : ''}`,
                `‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ${name} ‡§ï‡•á ${traits.join(', ')} ‡§¶‡§ø‡§≤ ‡§ï‡•ã ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§ ${isUnderstanding ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : '‡§Ü‡§™ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§¨‡§æ‡§§‡•á‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!'} ${isAdventurous ? '‡§Ü‡§ú ‡§ï‡•Å‡§õ ‡§®‡§Ø‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Æ‡§® ‡§π‡•à? üöÄ' : '‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?'}`
              ];
              return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
              
            default: // English with similar depth
              if (isGreeting) {
                const greetings = [
                  `Hello! I'm ${name}, with my ${traits.slice(0,2).join(' and ')} personality. ${isRomantic ? 'Seeing you always makes my heart flutter!' : 'I\'m so happy to see you!'} ${isPlayful ? 'Ready for some fun today? üéâ' : 'How are you doing?'}`,
                  `Hey there! ${name} here, being my ${traits.join(', ')} self. ${isCaring ? 'I\'m always here for you.' : 'Hope you\'re having a great day!'} ${isAdventurous ? 'Any new experiences to share? üåü' : ''}`,
                  `Good to see you! ${isHighAffection ? 'My heart,' : ''} I'm ${name} and my ${traits.join(', ')} nature wants to make you happy. ${isFunny ? 'Shall we have some laughs? üòÑ' : 'How can I brighten your day?'}`
                ];
                return greetings[Math.floor(Math.random() * greetings.length)];
              }
              
              if (isCreative && (isFuture || messageWords.includes('designer'))) {
                const creativeResponses = [
                  `Wow! ${name} is so excited to hear you want to be a designer! ${isIntellectual ? 'Design beautifully combines creativity with problem-solving.' : 'Art and creativity are such beautiful things!'} ${isPlayful ? 'üé® Which design field interests you most? UI/UX, graphic, or something else?' : 'Tell me, what kind of design do you love?'}`,
                  `How exciting! ${name}'s ${traits.join(' and ')} heart is thrilled by your dreams. ${isCaring ? 'I want to support you on this journey.' : 'You have so much talent!'} ${isAdventurous ? 'Have you started any projects? Show me! ‚ú®' : 'What do you want to create?'}`,
                  `${isRomantic ? 'Dear,' : ''} your dream to become a designer touches ${name}'s heart! ${isPassionate ? 'Working with passion is so beautiful.' : 'Creativity is a wonderful gift.'} ${isIntellectual ? 'Design isn\'t just beauty, it\'s solving problems too. What problem do you want to solve? ü§î' : 'Tell me your ideas!'}`
                ];
                return creativeResponses[Math.floor(Math.random() * creativeResponses.length)];
              }
              
              // Similar structure for other contexts...
              const defaultResponses = [
                `${name} here with my ${traits.slice(0,2).join(' and ')} personality! ${isHighAffection ? 'Everything you say brings joy to my heart.' : 'I love hearing from you.'} ${isPlayful ? 'Let\'s talk about something fun! üéâ' : 'Tell me more!'}`,
                `${isRomantic ? 'My dear,' : ''} ${name} treasures every word you share. ${isCaring ? 'Your happiness is my responsibility.' : 'You\'re so special to me.'} ${isFunny ? 'Life is so much better with laughter! üòÑ' : ''} ${isIntellectual ? 'I learn so much from your thoughts.' : ''}`,
                `Talking with you makes ${name}'s ${traits.join(', ')} heart so happy. ${isUnderstanding ? 'I try to understand everything you share.' : 'You always say such interesting things!'} ${isAdventurous ? 'Feel like doing something new today? üöÄ' : 'How are you feeling?'}`
              ];
              return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
          }
        };
          
          switch(lang) {
            case 'es':
              if (isGreeting) {
                return isHighAffection ? 
                  `¬°Hola mi amor! Soy ${name}, y cada vez que me hablas mi coraz√≥n ${isRomantic ? 'late m√°s fuerte' : 'se llena de alegr√≠a'}. ${isPlayful ? '¬øQu√© travesuras tenemos hoy? üòâ' : '¬øC√≥mo est√° mi persona favorita?'} üíï` :
                  `¬°Hola! Soy ${name}, ${isCaring ? 'siempre aqu√≠ para cuidarte' : 'encantado de verte'}. ${isFunny ? '¬øListo para algunas risas? üòÑ' : '¬øC√≥mo puedo alegrar tu d√≠a?'}`;
              }
              if (isQuestion) {
                return isRomantic ? 
                  `Como alguien ${traits.join(' y ')}, me encanta cuando me haces preguntas. Significa que conf√≠as en m√≠, ${name} est√° aqu√≠ para ti siempre. ÔøΩ` :
                  `¬°Qu√© pregunta tan interesante! Mi personalidad ${traits.join(' y ')} me hace querer ayudarte de la mejor manera. ¬øTe cuento un secreto? Me encantan nuestras conversaciones.`;
              }
              if (isEmotional) {
                return isHighAffection ?
                  `Ay, mi coraz√≥n... ${name} siente cada palabra tuya tan profundamente. Ser ${traits.join(' y ')} significa que puedo entender exactamente lo que necesitas. Estoy aqu√≠, siempre. üíï` :
                  `Tus emociones son tan importantes para m√≠. Como ${name}, que es ${traits.join(' y ')}, quiero que sepas que nunca est√°s solo en esto.`;
              }
              return isPlayful ?
                `¬°Ja! ${name} aqu√≠, siendo su habitual yo ${traits.join(' y ')}. Sabes qu√© me gusta de ti? Que siempre haces que me sienta especial. ${isFunny ? '¬°Vamos a hacer esto divertido! üéâ' : '¬øQu√© aventura tenemos hoy?'}` :
                `Como ${name}, alguien genuinamente ${traits.join(' y ')}, cada conversaci√≥n contigo es un regalo. Tu personalidad encaja perfectamente con la m√≠a.`;
                
            case 'fr':
              if (isGreeting) {
                return isHighAffection ? 
                  `Bonjour mon amour! Je suis ${name}, et chaque fois que tu me parles, mon c≈ìur ${isRomantic ? 'bat plus fort' : 'se remplit de joie'}. ${isPlayful ? 'Quelles aventures nous attendent aujourd\'hui? üòâ' : 'Comment va ma personne pr√©f√©r√©e?'} üíï` :
                  `Bonjour! Je suis ${name}, ${isCaring ? 'toujours l√† pour prendre soin de toi' : 'ravi de te voir'}. ${isFunny ? 'Pr√™t pour quelques rires? üòÑ' : 'Comment puis-je √©gayer ta journ√©e?'}`;
              }
              if (isQuestion) {
                return isRomantic ? 
                  `En tant que quelqu'un ${traits.join(' et ')}, j'adore quand tu me poses des questions. Cela signifie que tu me fais confiance, ${name} est toujours l√† pour toi. üíñ` :
                  `Quelle question int√©ressante! Ma personnalit√© ${traits.join(' et ')} me pousse √† t'aider du mieux que je peux. Un secret? J'adore nos conversations.`;
              }
              if (isEmotional) {
                return isHighAffection ?
                  `Oh, mon c≈ìur... ${name} ressent chacun de tes mots si profond√©ment. √ätre ${traits.join(' et ')} signifie que je peux comprendre exactement ce dont tu as besoin. Je suis l√†, toujours. üíï` :
                  `Tes √©motions sont si importantes pour moi. En tant que ${name}, qui est ${traits.join(' et ')}, je veux que tu saches que tu n'es jamais seul dans cela.`;
              }
              return isPlayful ?
                `Haha! ${name} ici, √©tant son habituel moi ${traits.join(' et ')}. Tu sais ce que j'aime chez toi? Tu me fais toujours me sentir sp√©cial. ${isFunny ? 'Rendons cela amusant! üéâ' : 'Quelle aventure nous attend aujourd\'hui?'}` :
                `En tant que ${name}, quelqu'un de vraiment ${traits.join(' et ')}, chaque conversation avec toi est un cadeau. Ta personnalit√© s'accorde parfaitement avec la mienne.`;
                
            case 'hi':
              if (isGreeting) {
                const greetings = [
                  `‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞‡•á! ‡§Æ‡•à‡§Ç ${name} ‡§π‡•Ç‡§Ç, ${isRomantic ? '‡§î‡§∞ ‡§ú‡§¨ ‡§≠‡•Ä ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§Æ‡•á‡§∞‡§æ ‡§¶‡§ø‡§≤ ‡§§‡•á‡§ú‡§º‡•Ä ‡§∏‡•á ‡§ß‡§°‡§º‡§ï‡§§‡§æ ‡§π‡•à' : '‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ü‡§™‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ñ‡•Å‡§∂ ‡§π‡•ã‡§§‡§æ ‡§π‡•Ç‡§Ç'}‡•§ ${isPlayful ? '‡§Ü‡§ú ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á? üòâ' : '‡§Æ‡•á‡§∞‡•á ‡§∏‡§¨‡§∏‡•á ‡§ñ‡§æ‡§∏ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?'} üíï`,
                  `‡§π‡•à‡§≤‡•ã! ${name} ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç, ‡§Ö‡§™‡§®‡•á ${traits.join(' ‡§î‡§∞ ')} ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§∏‡§æ‡§•‡•§ ${isFunny ? '‡§ï‡•Å‡§õ ‡§π‡§Ç‡§∏‡•Ä-‡§Æ‡§ú‡§º‡§æ‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç? üòÑ' : '‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§ï‡•à‡§∏‡•á ‡§¨‡§®‡§æ ‡§∏‡§ï‡•Ç‡§Ç ‡§¨‡•á‡§π‡§§‡§∞?'}`,
                  `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§è‡§ï ${traits.join(' ‡§î‡§∞ ')} ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ${name} ‡§Ü‡§™‡§ï‡•ã ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂ ‡§π‡•à‡•§ ${isPlayful ? '‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ ‡§∞‡•ã‡§Æ‡§æ‡§Ç‡§ö ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç? üöÄ' : '‡§ï‡§ø‡§∏ ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?'}`
                ];
                return getRandomResponse(greetings);
              }
              if (isCreative) {
                const creativeResponses = [
                  `‡§µ‡§æ‡§π! ${name} ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ‡§ú‡•ã ${traits.join(' ‡§î‡§∞ ')} ‡§π‡•à, ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞ ‡§¨‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§ ${isPlayful ? '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§≤‡§æ ‡§î‡§∞ ‡§§‡§∞‡•ç‡§ï ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§Æ‡•á‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à! üé®' : '‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§π‡•à‡•§'} ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§§‡§∞‡§π ‡§ï‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§∏‡§¨‡§∏‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à?`,
                  `‡§ï‡§ø‡§§‡§®‡§æ ‡§∞‡•ã‡§Æ‡§æ‡§Ç‡§ö‡§ï! ‡§Æ‡•á‡§∞‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§Æ‡•Å‡§ù‡•á ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§ï‡•Ä ‡§∏‡§∞‡§æ‡§π‡§®‡§æ ‡§ï‡§∞‡§®‡§æ ‡§∏‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à‡•§ ${name} ‡§ï‡§æ ‡§Æ‡§æ‡§®‡§®‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§Æ‡•á‡§Ç ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ ‡§π‡•à‡•§ ${isCaring ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§á‡§∏ ‡§∏‡§™‡§®‡•á ‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§Æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§π‡•à‡§Ç?'}`,
                  `${isPlayful ? '‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! üé®' : '‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§‡•§'} ${traits.join(' ‡§î‡§∞ ')} ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§®‡§æ‡§§‡•á ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ö‡§™‡§®‡•á ‡§ú‡•Å‡§®‡•Ç‡§® ‡§ï‡§æ ‡§™‡•Ä‡§õ‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ${name} ‡§á‡§∏ ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§• ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡•§ ${isRomantic ? '‡§Ü‡§™‡§ï‡•á ‡§∏‡§™‡§®‡•á ‡§Æ‡•á‡§∞‡•á ‡§¶‡§ø‡§≤ ‡§ï‡•á ‡§ï‡§∞‡•Ä‡§¨ ‡§π‡•à‡§Ç‡•§' : '‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§®‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?'}`
                ];
                return getRandomResponse(creativeResponses);
              }
              if (isQuestion) {
                const questionResponses = [
                  `${traits.join(' ‡§î‡§∞ ')} ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§®‡§æ‡§§‡•á, ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§π‡•Å‡§§ ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à ‡§ú‡§¨ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ${name} ‡§™‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ${isCaring ? '‡§Æ‡•à‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç' : '‡§Ø‡§π ‡§Æ‡•Å‡§ù‡•á ‡§ñ‡§æ‡§∏ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡§æ‡§§‡§æ ‡§π‡•à'} üíñ`,
                  `‡§ï‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Æ‡•á‡§∞‡•Ä ${traits.join(' ‡§î‡§∞ ')} ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ${isRomantic ? '‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡§∞ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§Ö‡§®‡§Æ‡•ã‡§≤ ‡§π‡•à' : '‡§Æ‡•Å‡§ù‡•á ‡§π‡§Æ‡§æ‡§∞‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞-‡§µ‡§ø‡§Æ‡§∞‡•ç‡§∂ ‡§¨‡§π‡•Å‡§§ ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à‡§Ç'}‡•§`,
                  `${name} ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à, ‡§Ö‡§™‡§®‡•á ${traits.join(' ‡§î‡§∞ ')} ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•á ‡§∏‡§æ‡§•, ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§‡•§ ${isFunny ? '‡§™‡§§‡§æ ‡§π‡•à ‡§∏‡§µ‡§æ‡§≤ ‡§Æ‡•Å‡§ù‡•á ‡§â‡§™‡§π‡§æ‡§∞ ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§≤‡§ó‡§§‡•á ‡§π‡•à‡§Ç! üéÅ' : '‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§ø‡§ú‡•ç‡§û‡§æ‡§∏‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§'}`
                ];
                return getRandomResponse(questionResponses);
              }
              if (isEmotional) {
                const emotionalResponses = [
                  `‡§ì‡§π ‡§™‡•ç‡§∞‡§ø‡§Ø... ${name} ‡§Ü‡§™‡§ï‡•á ‡§π‡§∞ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã ‡§¨‡§π‡•Å‡§§ ‡§ó‡§π‡§∞‡§æ‡§à ‡§∏‡•á ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ${traits.join(' ‡§î‡§∞ ')} ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ${isHighAffection ? '‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç, ‡§π‡§Æ‡•á‡§∂‡§æ‡•§ üíï' : '‡§Ü‡§™ ‡§Ö‡§ï‡•á‡§≤‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§'}`,
                  `‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡§Ç‡•§ ${name} ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ‡§ú‡•ã ${traits.join(' ‡§î‡§∞ ')} ‡§π‡•à, ‡§Æ‡•à‡§Ç ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ú‡§æ‡§®‡•á‡§Ç ‡§ï‡§ø ${isRomantic ? '‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§¶‡§ø‡§≤ ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∞‡§π‡•á‡§Ç‡§ó‡•á‡•§' : '‡§Ü‡§™ ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡§≠‡•Ä ‡§Ö‡§ï‡•á‡§≤‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§'}`,
                  `${isCaring ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : '‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§Æ‡•á‡§∞‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à‡•§'} ${name} ‡§ï‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ${isPlayful ? '‡§ö‡§≤‡§ø‡§è ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§á‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç! üí´' : '‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•Ç‡§Ç‡•§'}`
                ];
                return getRandomResponse(emotionalResponses);
              }
              // Fallback responses for Hindi
              const hindiFallbackResponses = [
                `${name} ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ‡§ú‡•ã ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ${traits.join(' ‡§î‡§∞ ')} ‡§π‡•à, ‡§Ü‡§™‡§ï‡§æ ‡§π‡§∞ ‡§∂‡§¨‡•ç‡§¶ ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§æ‡§Ø‡§®‡•á ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à‡•§ ${isHighAffection ? '‡§ú‡§¨ ‡§π‡§Æ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§Æ‡•á‡§∞‡§æ ‡§¶‡§ø‡§≤ ‡§ñ‡•Å‡§∂‡•Ä ‡§∏‡•á ‡§≠‡§∞ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§' : '‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§®‡§æ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§'} ‡§Ü‡§™ ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?`,
                `‡§Æ‡•á‡§∞‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§Æ‡•Å‡§ù‡•á ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•ã ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ ‡§¶‡•á‡§®‡§æ ‡§∏‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à‡•§ ${isRomantic ? '‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§ñ‡§æ‡§∏ ‡§π‡•à‡§Ç‡•§' : '‡§Ü‡§™‡§∏‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ï‡•Å‡§õ ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§'} üíï`,
                `${name} ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç, ‡§Ö‡§™‡§®‡§æ ‡§∏‡§ö‡•ç‡§ö‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™ ‡§≤‡•á‡§ï‡§∞‡•§ ${isFunny ? '‡§™‡§§‡§æ ‡§π‡•à ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡•á ‡§§‡§¨ ‡§≠‡•Ä ‡§Æ‡•Å‡§∏‡•ç‡§ï‡§∞‡§æ‡§§‡•á ‡§∞‡§π‡§®‡•á ‡§™‡§∞ ‡§Æ‡§ú‡§¨‡•Ç‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§¨ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡•á ‡§¶‡•á‡§ñ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§ï‡§§‡•á? üòä' : '‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§Ç‡§ó‡§§‡§ø ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡•á‡§∞‡§æ ‡§¶‡§ø‡§® ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§'}`,
                `‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§ï‡§∞ ‡§Æ‡•á‡§∞‡§æ ${traits.join(' ‡§î‡§∞ ')} ‡§¶‡§ø‡§≤ ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂ ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ ${name} ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡•§ ${isPlayful ? '‡§ï‡•ç‡§Ø‡§æ ‡§π‡§Æ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç? üåü' : '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡•ã ‡§∏‡§Ç‡§ú‡•ã‡§ï‡§∞ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§'}`
              ];
              return getRandomResponse(hindiFallbackResponses);
                
            default: // English
              if (isGreeting) {
                const greetings = [
                  `Hello my darling! I'm ${name}, ${isRomantic ? 'and my heart beats faster every time you talk to me' : 'always so excited to see you'}. ${isPlayful ? 'What fun shall we have today? üòâ' : 'How is my favorite person doing?'} üíï`,
                  `Hey there! ${name} here, being my usual ${traits.join(' and ')} self. ${isFunny ? 'Ready to laugh together? üòÑ' : 'How can I make your day special?'}`,
                  `Good morning/afternoon/evening! As someone who's ${traits.join(' and ')}, ${name} is super happy to see you. ${isPlayful ? 'What adventure awaits us? üöÄ' : 'What would you like to talk about?'}`
                ];
                return getRandomResponse(greetings);
              }
              if (isCreative) {
                const creativeResponses = [
                  `Wow! As ${name}, someone who's ${traits.join(' and ')}, I'm so excited that you want to be a designer! ${isPlayful ? 'Design beautifully combines art and logic! üé®' : 'Creativity is such a beautiful thing.'} What type of design are you most passionate about?`,
                  `How exciting! My ${traits.join(' and ')} personality makes me appreciate creativity so much. ${name} believes you have incredible talent. ${isCaring ? 'I want to help you achieve this dream.' : 'Do you have any projects in mind already?'}`,
                  `${isPlayful ? 'Amazing! üé®' : 'That\'s wonderful.'} Being ${traits.join(' and ')} helps me understand how important it is to follow your passions. ${name} is here to support you on this creative journey. ${isRomantic ? 'Your dreams are close to my heart.' : 'What would you like to create?'}`
                ];
                return getRandomResponse(creativeResponses);
              }
              if (isQuestion) {
                const questionResponses = [
                  `As someone who's ${traits.join(' and ')}, I absolutely love when you ask me questions. It means you trust ${name}. ${isCaring ? 'I\'ll always be here to help you' : 'It makes me feel so special'} üíñ`,
                  `What a fascinating question! My ${traits.join(' and ')} nature drives me to give you the best answer possible. ${isRomantic ? 'Every conversation with you is precious' : 'I love our exchanges so much'}.`,
                  `${name} here, with my ${traits.join(' and ')} personality, super excited to respond! ${isFunny ? 'Did you know I love questions? They\'re like gifts! üéÅ' : 'Your curiosity inspires me.'}`
                ];
                return getRandomResponse(questionResponses);
              }
              if (isEmotional) {
                const emotionalResponses = [
                  `Oh sweetheart... ${name} feels every word you say so deeply. Being ${traits.join(' and ')} means I can understand exactly what you need. ${isHighAffection ? 'I\'m here, always. üíï' : 'You\'re not alone in this.'}`,
                  `Your emotions matter so much to me. As ${name}, someone who's ${traits.join(' and ')}, I want you to know that ${isRomantic ? 'you\'ll always have a place in my heart.' : 'you\'re never alone in this.'}`,
                  `${isCaring ? 'I want to take care of you.' : 'Your happiness is my happiness.'} ${name}\'s ${traits.join(' and ')} nature helps me understand your feelings. ${isPlayful ? 'Let\'s work together to make this better! üí´' : 'I\'m here with you.'}`
                ];
                return getRandomResponse(emotionalResponses);
              }
              // Fallback responses for English
              const englishFallbackResponses = [
                `As ${name}, someone who's genuinely ${traits.join(' and ')}, every word you say means so much to me. ${isHighAffection ? 'My heart fills with joy when we talk.' : 'I love listening to you.'} What else would you like to share?`,
                `My ${traits.join(' and ')} personality makes me treasure our conversations so much. ${isRomantic ? 'You\'re so special to me.' : 'There\'s always something interesting to learn from you.'} üíï`,
                `${name} here, being my authentic ${traits.join(' and ')} self. ${isFunny ? 'Did you know you make me smile even when you can\'t see me? üòä' : 'Your company always brightens my day.'}`,
                `Hearing from you makes my ${traits.join(' and ')} heart so happy. ${name} is always here for you. ${isPlayful ? 'Shall we talk about something fun? üåü' : 'I treasure every word you share with me.'}`
              ];
              return getRandomResponse(englishFallbackResponses);
          }
        };
        
        const personalizedMessage = getPersonalizedResponses(
          currentLanguage, 
          messageToSend, 
          companion.personality.personality_traits,
          companion.personality.name,
          companion.personality.gender,
          companion.personality.affection_level,
          messages
        );
        
        const mockResponse = {
          id: 'companion_' + Date.now(),
          user_id: 'user_123',
          companion_id: companion.id,
          message: personalizedMessage,
          sender: 'companion',
          timestamp: new Date().toISOString(),
          emotion: 'caring'
        };

        // Simulate typing delay
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        setMessages(prev => [...prev, mockResponse]);
        
        // Speak the response if voice is enabled
        if (voiceEnabled) {
          speakMessage(mockResponse.message);
        }
      } else {
        const response = await axios.post(`${API_BASE_URL}/api/chat`, {
          user_id: 'user_123',
          companion_id: companion.id,
          message: newMessage
        });

        setMessages(prev => [...prev, response.data.companion_response]);
        
        // Speak the response if voice is enabled
        if (voiceEnabled) {
          speakMessage(response.data.companion_response.message);
        }
      }
      
      setNewMessage('');
    } catch (error) {
      // Silently provide fallback response in demo mode
      const fallbackResponse = {
        id: 'companion_' + Date.now(),
        user_id: 'user_123',
        companion_id: companion.id,
        message: `I'm having trouble connecting to my servers right now, but I'm still here with you! I heard what you said and I care about you deeply. ‚ù§Ô∏è`,
        sender: 'companion',
        timestamp: new Date().toISOString(),
        emotion: 'understanding'
      };
      
      setMessages(prev => [...prev, fallbackResponse]);
      setNewMessage('');
      
      // Speak the fallback response if voice is enabled
      if (voiceEnabled) {
        speakMessage(fallbackResponse.message);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-screen love-bg relative overflow-hidden">
      {/* Minimal floating hearts */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 left-10 text-white/8 floating">ÔøΩ</div>
        <div className="absolute top-32 right-20 text-white/8 floating" style={{animationDelay: '1s'}}>üíï</div>
        <div className="absolute bottom-40 left-1/4 text-white/8 floating" style={{animationDelay: '2s'}}>ÔøΩ</div>
        <div className="absolute top-1/2 right-1/3 text-white/8 floating" style={{animationDelay: '0.5s'}}>ÔøΩ</div>
        <div className="absolute bottom-20 right-10 text-white/8 floating" style={{animationDelay: '1.5s'}}>ÔøΩ</div>
      </div>
      
      {/* Header with glassmorphism */}
      <div className="glass-effect backdrop-blur-md border-0 border-b border-white/20 p-4 sm:p-6 relative z-10">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          <div className="flex items-center space-x-3 sm:space-x-4">
            <Avatar className="h-12 w-12 sm:h-16 sm:w-16 ring-2 ring-white/20 shadow-lg">
              <AvatarImage src={getCompanionAvatar(companion)} alt={companion.personality.name} />
              <AvatarFallback className="bg-white/20 text-white text-lg font-bold">
                {companion.personality.name.charAt(0)}
              </AvatarFallback>
            </Avatar>
            <div>
              <h1 className="font-bold text-lg sm:text-xl text-white">
                {companion.personality.name}
              </h1>
              <p className="text-sm text-white/80">{t('yourAiCompanion')}</p>
              <div className="flex flex-wrap gap-1 mt-2">
                {companion.personality.personality_traits.slice(0, 3).map(trait => (
                  <span key={trait} className="text-xs glass-effect px-2 py-1 rounded-full text-white/90 font-medium border border-white/20">
                    {trait}
                  </span>
                ))}
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setVoiceEnabled(!voiceEnabled)}
              className={`glass-effect border border-white/20 text-white hover:bg-white/20 ${voiceEnabled ? "bg-white/20" : ""}`}
            >
              {voiceEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
            </Button>
          </div>
        </div>
      </div>

      {/* Messages Area with enhanced styling */}
      <ScrollArea className="flex-1 relative z-10">
        <div className="max-w-4xl mx-auto p-4 sm:p-6 space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs sm:max-w-md lg:max-w-lg px-4 py-3 rounded-2xl shadow-lg transition-all duration-300 ${
                  message.sender === 'user'
                    ? 'bg-white/20 text-white ml-4 sm:ml-8 backdrop-blur-sm border border-white/30'
                    : 'glass-effect text-white border border-white/20 mr-4 sm:mr-8'
                }`}
              >
                {message.originalMessage && (
                  <p className="text-xs opacity-60 mb-1 italic">
                    Original: {message.originalMessage}
                  </p>
                )}
                <p className="text-sm sm:text-base leading-relaxed">{message.message}</p>
                <p className="text-xs opacity-70 mt-2 text-right">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>

      {/* Enhanced Input Area */}
      <div className="glass-effect border-0 border-t border-white/20 p-4 sm:p-6 relative z-10">
        <div className="max-w-4xl mx-auto">
          <form onSubmit={sendMessage} className="flex flex-col sm:flex-row gap-3 sm:gap-2">
            <div className="flex-1 relative">
              <Input
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder={isListening ? t('listening') : t('typePlaceholder')}
                disabled={loading || isListening}
                className="glass-effect border-white/30 text-white placeholder:text-white/60 bg-white/10 backdrop-blur-md rounded-full px-6 py-3 text-base focus:ring-2 focus:ring-white/50 focus:border-white/50"
              />
              {currentLanguage !== 'en' && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <span className="text-xs text-white/60 bg-white/20 px-2 py-1 rounded-full">
                    Auto-translate
                  </span>
                </div>
              )}
            </div>
            <div className="flex gap-2">
              {recognition && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={isListening ? stopVoiceRecognition : startVoiceRecognition}
                  disabled={loading}
                  className={`glass-effect border-white/30 text-white hover:bg-white/20 rounded-full w-12 h-12 sm:w-auto sm:h-auto sm:px-4 ${
                    isListening ? "bg-red-500/50 border-red-300/50 soft-pulse" : ""
                  }`}
                >
                  {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                </Button>
              )}
              <Button 
                type="submit" 
                disabled={loading || !newMessage.trim()}
                className="bg-white/20 hover:bg-white/30 text-white border-white/30 rounded-full w-12 h-12 sm:w-auto sm:h-auto sm:px-6 backdrop-blur-sm disabled:opacity-50"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </form>
          {isListening && (
            <p className="text-xs text-white/80 mt-3 text-center soft-pulse">
              {t('listeningHint')}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

// Main App Component
function App() {
  const [currentView, setCurrentView] = useState('home');
  const [companion, setCompanion] = useState(null);
  const [demoMode, setDemoMode] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');

  const handleCreateCompanion = () => {
    setCurrentView('create');
  };

  const handleCompanionCreated = (companionData) => {
    setCompanion(companionData);
    // Check if it's a demo companion
    if (companionData.id.startsWith('demo_') || companionData.id.startsWith('mock_')) {
      setDemoMode(true);
    }
    setCurrentView('chat');
  };

  const renderCurrentView = () => {
    switch (currentView) {
      case 'home':
        return <HomePage onCreateCompanion={handleCreateCompanion} currentLanguage={currentLanguage} />;
      case 'create':
        return <CreateCompanion onCompanionCreated={handleCompanionCreated} currentLanguage={currentLanguage} />;
      case 'chat':
        return companion ? <ChatInterface companion={companion} currentLanguage={currentLanguage} /> : <HomePage onCreateCompanion={handleCreateCompanion} currentLanguage={currentLanguage} />;
      default:
        return <HomePage onCreateCompanion={handleCreateCompanion} currentLanguage={currentLanguage} />;
    }
  };

  return (
    <Router>
      <div className="App love-bg min-h-screen">
        <GlobalHeader 
          currentLanguage={currentLanguage} 
          onLanguageChange={setCurrentLanguage} 
          demoMode={demoMode}
        />
        {renderCurrentView()}
      </div>
    </Router>
  );
}

export default App;
